"THE HASKELL ROAD"
CHAPTER ONE
MY ANSWERS

(Note: these are my answers, not the solution manual's or any other source's, so consider them unverified.)

EXERCISE 1.1

Try out a few calculations using * for multiplication, + for addition, - for subtraction, ^ for exponentiation, / for division. By playing with the system, find out what the precedence order is among these operators.

My answer:

Prelude> 2 ^ 4 * 6 + 8
104
Prelude> 2 ^ 4 * (6 + 8)
224
Prelude> 2 ^ (4 * 6) + 8
16777224
Prelude> (2 ^ 4) * 6 + 8
104
Prelude> ((2 ^ 4) * 6) + 8
104

In the above lines, order of operations is exponentiation, multiplication, and addition.

Prelude> 2 ^ 4 * 6 - 8
88
Prelude> 2 ^ 4 * (6 - 8)
-32
Prelude> 2 ^ (4 * 6) - 8
16777208
Prelude> (2 ^ 4) * 6 - 8
88
Prelude> ((2 ^ 4) * 6) - 8
88

In the above lines, order of operations is exponentiation, multiplication, and subtraction.

Prelude> 10-2+300
308
Prelude> 10 - 2 + 300
308
Prelude> (10 - 2) + 300
308
Prelude> 10 - (2 + 300)
-292
Prelude> - 2 + 300 + 10
308
Prelude> (-2 + 300) + 10
308
Prelude> -2 + (300 + 10)
308

Addition and subtraction have equal precedence. This is unsurprising as the second term of subtraction is merely the addition of its negation.

Therefore, order of operations is exponentiation, multiplication, and addition/subtraction.

[NOTE: Propositions and exercises are lumped together for numbering purposes. There's a Proposition 1.2 so the next exercise is 1.3.]

EXERCISE 1.3

Put the definition of divides in a file prime.hs. Start the Haskell interpreter hugs (Section 1.1). Now give the command :load prime or :l prime, followed by pressing Enter. Note that l is the letter l, not the digit 1. (Next to :l, a very useful command after you have edited a file of Haskell code is :reload or :r, for reloading the file.)

Prelude> :l prime 
Main>

The string Main> is the Haskell prompt indicating that user-defined files are loaded. This is a sign that the definition was added to the system. The newly defined oper- ation can now be executed, as follows:

Main> divides 5 7 
False
Main>

The string Main> is the Haskell prompt, the rest of the first line is what you type. When you press Enter the system answers with the second line, followed by the Haskell prompt. You can then continue with:

Main> divides 5 30 
True

My answer: I named the file "prime-new.hs" (to indicate I typed the file rather than transferred it from the book's website--not an option here but it is for other files).

Here's the terminal's output, including a reminder that negative numbers need to be enclosed in round brackets:

Prelude> :l prime-new
[1 of 1] Compiling Main             ( prime-new.hs, interpreted )
Ok, modules loaded: Main.
*Main> divides 5 7
False
*Main> divides 5 30
True
*Main> divides 5 -25

<interactive>:49:1:
    No instance for (Integral a0) arising from a use of `divides'
    The type variable `a0' is ambiguous
    Possible fix: add a type signature that fixes these type variable(s)
    Note: there are several potential instances:
      instance Integral Int -- Defined in `GHC.Real'
      instance Integral Integer -- Defined in `GHC.Real'
      instance Integral GHC.Types.Word -- Defined in `GHC.Real'
    In the first argument of `(-)', namely `divides 5'
    In the expression: divides 5 - 25
    In an equation for `it': it = divides 5 - 25

<interactive>:49:9:
    No instance for (Num a0) arising from the literal `5'
    The type variable `a0' is ambiguous
    Possible fix: add a type signature that fixes these type variable(s)
    Note: there are several potential instances:
      instance Num Double -- Defined in `GHC.Float'
      instance Num Float -- Defined in `GHC.Float'
      instance Integral a => Num (GHC.Real.Ratio a)
        -- Defined in `GHC.Real'
      ...plus three others
    In the first argument of `divides', namely `5'
    In the first argument of `(-)', namely `divides 5'
    In the expression: divides 5 - 25

<interactive>:49:11:
    No instance for (Num (a0 -> Bool)) arising from a use of `-'
    Possible fix: add an instance declaration for (Num (a0 -> Bool))
    In the expression: divides 5 - 25
    In an equation for `it': it = divides 5 - 25
*Main> divides 5 (-25)
True
*Main> divides (-5) (-25)
True
*Main> divides (-5) (-7)
False

EXERCISE 1.4

Suppose in the definition of ldf we replace the condition k^2 > n by k^2 >= n, where >= expresses 'greater than or equal'. Would that make any difference to the meaning of the program? Why (not)?

My answer:

The book's definition of function ldf is:

ldf k n | divides k n = k
ldf k n | k^2 > n     = n
ldf k n               = ldf (k+1) n

and it's used in a function ld in which the search for the lowest natural number dividing n starts at k = 2.

Assuming the initial k is positive, the problem with replacing the cut-off point k^2 > n with k^2 >= n is that it would wrongly report that perfect squares m^2 = n have a lowest divisor of n rather than m.

EXERCISE 1.5

Add these definitions to the file prime.hs and try them out.

My answer:

With the definitions for ldf, ld, and prime0 added to the one-line file, it now looks like:

<start>

divides d n = rem n d == 0

ldf k n | divides k n = k
ldf k n | k^2 > n     = n
ldf k n               = ldf (k+1) n

ld n = ldf 2 n

prime0 n | n <  1    = error "not a positive integer"
         | n == 1    = False
         | otherwise = ld n == n

<end>

And here's a test run in the terminal:

<start>

*Main> :r
[1 of 1] Compiling Main             ( prime-new.hs, interpreted )
Ok, modules loaded: Main.
*Main> prime0 10
False
*Main> prime0 11
True
*Main> prime0 12
False
*Main> prime0 2
True
*Main> prime0 1
False
*Main> prime0 (-2)
*** Exception: not a positive integer
*Main> prime0 0
*** Exception: not a positive integer
*Main> prime0 49279149121
False
*Main> prime0 100000000000000000
False
*Main> prime0  99999999999999997
True

<end>

Despite its large size the second-last number was quickly determined not to be prime (as no even number over 2 can be prime, all even numbers are divisible by 2, and the program would have quickly found 2 as a divisor).

It took a lot more time to determine that the last number, about the same size but odd, was prime (the program would have tested the divisibility of the number using all natural number divisors less than or equal to its square root, hence it would test up to and including 31 622 776 601).

EXERCISE 1.6 

Can you gather from the definition of divides what the type declaration for rem would look like?

My answer:

The definition of the divides function is:

<start>

divides :: Integer -> Integer -> Bool
divides d n = rem n d == 0

<end>

From the definition of divides we know d and n are integers and apparently return an integer.

In that case type declaration of rem should be:

Integer -> Integer -> Integer.

Checking on the terminal reveals:

<start>

*Main> :t divides
divides :: Integral a => a -> a -> Bool
*Main> :t rem
rem :: Integral a => a -> a -> a

<end>

where :t is a command to return the type declaration.

There are three kinds of Integral variable, Integer being one of them, so my answer is consistent with what Haskell tells me, although my answer was too narrow.

EXERCISE 1.7 

The hugs system has a command for checking the types of expressions. Can you explain the following (please try it out; make sure that the file with the definition of divides is loaded, together with the type declaration for divides):

Main> :t divides 5
divides 5 :: Integer -> Bool 
Main> :t divides 5 7
divides 5 7 :: Bool
Main>

My answer:

I used GHC instead of hugs.

The book previously updated the function definition of divides to include a type declaration:

<start>

divides :: Integer -> Integer -> Bool
divides d n = rem n d == 0

<end>

I reloaded the file and replicated the question's types.

<start>

*Main> :r
[1 of 1] Compiling Main             ( prime-new.hs, interpreted )
Ok, modules loaded: Main.
*Main> :t divides 5
divides 5 :: Integer -> Bool
*Main> :t divides 5 7
divides 5 7 :: Bool

<end>

In the first case (:t divides 5) the function and its divisor 5 are specified, but we still need to provide the dividend before the function tells us if divisibility is True or False. Hence it still requires an input of type Integer.

In the second case the function's input values (divisor and dividend) have already been provided, so the function will provide a Boolean True or False on the two divisibility of 7 by 5 without further input. It simply returns a Bool value.

[Example 1.8 was numbered next.]

EXERCISE 1.9

Define a function that gives the maximum of a list of integers. Use the predefined function max.

My answer:

Instead of retrieving the module GS.hs I decided to start a new file GS-new.hs.

The book already provided code for finding the minimum:

<start>

mnmInt :: [Int] -> Int
mnmInt [] = error "empty list" 
mnmInt [x] = x
mnmInt (x:xs) = min x (mnmInt xs)

<end>

Loading GS-new.hs and trying out the function gave these results:

<start>

Prelude> :l GS-new
[1 of 1] Compiling Main             ( GS-new.hs, interpreted )
Ok, modules loaded: Main.
*Main> mnmInt [1,2,3,4,5]
1
*Main> mnmInt [-12343214,-32423,-1234223432,-3,100]
-1234223432
*Main> mnmInt [1.5, 3]

<interactive>:7:9:
    No instance for (Fractional Int) arising from the literal `1.5'
    Possible fix: add an instance declaration for (Fractional Int)
    In the expression: 1.5
    In the first argument of `mnmInt', namely `[1.5, 3]'
    In the expression: mnmInt [1.5, 3]
    
<end>

As the mnmInt function's type declaration specifies "Int" (and it's also in the function name) it's no surprise using 1.5 as an input causes an error.

Now on to the exercise. I'll define maxInt using the mnmInt function as a template and simply replacing "min" with "max" (as well as renaming the function including the recursion on the last line):

<start>

maxInt :: [Int] -> Int
maxInt [] = error "empty list" 
maxInt [x] = x
maxInt (x:xs) = max x (maxInt xs)

<end>

This produces:

<start>

*Main> :r
[1 of 1] Compiling Main             ( GS-new.hs, interpreted )
Ok, modules loaded: Main.
*Main> maxInt[12,13]
13
*Main> maxInt[12]
12
*Main> maxInt[]
*** Exception: empty list
*Main> maxInt[-100,0,100,200,300]
300
*Main> maxInt[3,4,8,19,2,112,-163,1291,-44432,0]
1291

<end>

It appears to work as it should.

EXERCISE 1.10 

Define a function removeFst that removes the first occurrence of an integer m from a list of integers. If m does not occur in the list, the list remains unchanged.

My answer:

I created a program that took an integer and a list and returned another list without the first instance (if any) of the specified integer.

Here it is:

<start>

removeFst :: Int -> [Int] -> [Int]
removeFst r [] = []
removeFst r (x:xs) | r      == x  = xs
                   | r      /= x  = x:removeFst r xs

<end>

The first line is the type declaration: take an integer and a list of integers, and return a list of integers.

The second line says an empty list remains an empty list.

The program then ends.

The third line says if the target integer equals the first element of the list, then remove that first element.

The program then ends.

The fourth line says if the target integer does not equal the first element of the list, the list equals the first element plus the resulting sublist when the function is applied.

The fourth line is using recursion, so smaller and smaller lists are potentially examined by the function.

To repeat, because of recursion, sometimes smaller and smaller lists are examined, and then they’re all recombined:

(head1:tail1)
(head1:head2:tail2)
(head1:head2:head3:tail3)
...

--with the process ending when one of the heads matches the target integer or a tail turns up empty.

And let’s see how that works out, ending with two cases that should (and did) return errors as only one input was given:

<start>

*Main> removeFst 3 [1,2,3]
[1,2]
*Main> removeFst 3 [4,5,6]
[4,5,6]
*Main> removeFst 3 [1,2,3,3,3,4]
[1,2,3,3,4]
*Main> removeFst 3 []
[]
*Main> removeFst []

<interactive>:128:11:
    Couldn't match expected type `Int' with actual type `[a0]'
    In the first argument of `removeFst', namely `[]'
    In the expression: removeFst []
    In an equation for `it': it = removeFst []
*Main> removeFst 3

<interactive>:129:1:
    No instance for (Show ([Int] -> [Int]))
      arising from a use of `print'
    Possible fix:
      add an instance declaration for (Show ([Int] -> [Int]))
    In a stmt of an interactive GHCi command: print it

<end>

So the program appears to work as it should.

[Examples 1.11 and 1.12 are next in the numbering scheme.]

[See GS-new.hs for notes on resolving issue with Example 1.12 code when running on current GHCi interpreter.]

EXERCISE 1.13

Write a function count for counting the number of occurrences of a character in a string. In Haskell, a character is an object of type Char, and a string an object of type String, so the type declaration should run: count :: Char -> String -> Int.

My answer:

<start>

count :: Char -> String -> Int
count t [] = 0 
count t target | t == head target = 1 + count t (tail target)
               | t /= head target = 0 + count t (tail target)

<end>

and testing the function produces:

<start>

Prelude> :r
[1 of 1] Compiling Main             ( GS-new.hs, interpreted )
Ok, modules loaded: Main.
*Main> count 'f' "fruit"
1
*Main> count 'f' "fffffoog"
5
*Main> count 'f' "office"
2
*Main> count 'f' "Haskell"
0
*Main> count 'f' "Finland"
0
*Main> count 'F' "Finland"
1

<end> 

The program appears to work as it should.

I do note, though, that I used the commands head and tail as I could not figure out how to use (x:xs) pattern matching in this situation.

After a bit more pondering I produced this:

<start>

count' :: Char -> String -> Int
count' t [] = 0
count' t (x:xs) | t == x     = 1 + count' t (xs)
                | otherwise  = 0 + count' t (xs)

<end>

--which appeared to work as required:

<start>

*Main> count' 'f' "off"
2
*Main> count' 'f' "grapefruit"
1
*Main> count' 'f' "orange"
0
*Main> count' 'g' "gaggle of geese"
4

<end>

The prime mark in count' is used to distinguish count' from count.

EXERCISE 1.14

A function for transforming strings into strings is of type String -> String. Write a function blowup that converts a string

a_1 a_2 a_3 ...

to

a_1 a_2 a_2 a_3 a_3 a_3....

blowup “bang!” should yield “baannngggg!!!!!”. (Hint: use ++ for string concatenation.)

My answer:

The function charTimes a string with the specified integer of copies of the specified character:

<start>

*Main> charTimes 5 'f'
"fffff"
*Main> charTimes 0 'f'
"*** Exception: positive integer required
*Main> charTimes 33 'g'
"ggggggggggggggggggggggggggggggggg"

<end>

Here’s the code for charTimes:

<start>

charTimes :: Int -> Char -> String
charTimes m c | m <  1    = error "positive integer required"
charTimes m c | m == 1    = [c]
charTimes m c | m >  1    = [c] ++ charTimes (m - 1) c

<end>

The function blowupGeneric creates a new string from an old string by going through each character in the old string and copying it into the new string based on the initial value and the increment:

<start>

*Main> blowupGeneric 1 0 "rock"
"rock"
*Main> blowupGeneric 2 0 "rock"
"rroocckk"
*Main> blowupGeneric 3 0 "rock"
"rrroooccckkk"
*Main> blowupGeneric 4 0 "rock"
"rrrroooocccckkkk"
*Main> blowupGeneric 1 1 "rock"
"rooccckkkk"
*Main> blowupGeneric 6 (-1) "rock"
"rrrrrrooooocccckkk"
*Main> blowupGeneric 3 (-1) "rock"
"rrrooc"

<end>

Here’s the blowupGeneric function, using head and tail (not introduced yet in the book):

<start>

blowupGeneric :: Int -> Int -> String -> String
blowupGeneric a b s  | a < 1 = []
blowupGeneric a b []         = []
blowupGeneric a b s          = charTimes a (head(s)) ++ blowupGeneric (a + b) b (tail(s))

<end>

And here’s the blowupGeneric' function, using (x:xs) pattern matching (already used in the book):

<start>

blowupGeneric' :: Int -> Int -> String -> String
blowupGeneric' a b s | a < 1 = []
blowupGeneric' a b []        = []
blowupGeneric' a b (x:xs)    = charTimes a x ++ blowupGeneric' (a + b) b xs

<end>

The blowup function simply uses blowupGeneric 1 1 {string}, which prints off one copy of the first character, 1 + 1 = 2 copies of the second character, 2 + 1 = 3 copies of the third character, and so on:

<start>

*Main> blowup "rock"
"rooccckkkk"
*Main> blowup "bang!"
"baannngggg!!!!!"

<end>

Here’s the code for blowup, which relies on blowupGeneric:

<start>

blowup :: String -> String
blowup s = blowupGeneric 1 1 s

<end>

And here’s the code for blowup', which relies on blowupGeneric':

<start>

blowup' :: String -> String
blowup' s = blowupGeneric' 1 1 s

<end>

(I should note that I’m not sure if I’m officially allowed to end a function name with “Generic.” I noticed some built-in functions do so.)

